{"version":3,"sources":["components/Form/Form.js","components/Filter/Filter.js","components/ContactsListElement/ContactsListElement.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["Form","nameId","uuidv1","numberId","state","name","number","inputChange","e","target","value","setState","submit","preventDefault","props","reset","onSubmit","this","className","htmlFor","id","type","pattern","title","required","autoComplete","onChange","Component","Filter","ContactsListElement","onClick","PropTypes","names","arrayOf","object","func","Contacts","map","el","App","filterFieldId","contacts","filter","obj","find","contact","alert","prevState","contactsFiltering","filterValue","toLocaleLowerCase","toLowerCase","includes","deleteContact","parentNode","localStorage","getItem","JSON","parse","prevProps","length","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83a5c979.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { v1 as uuidv1 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass Form extends Component {\n  nameId = uuidv1();\n  numberId = uuidv1();\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  inputChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submit = e => {\n    e.preventDefault();\n    const { props, state, reset } = this;\n\n    props.onSubmit(state);\n    reset();\n  };\n\n  reset = () => {\n    return this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { submit, nameId, state, inputChange, numberId } = this;\n    return (\n      <form className=\"form\" onSubmit={submit}>\n        <label className=\"label\" htmlFor={nameId}>\n          Name\n        </label>\n        <input\n          id={nameId}\n          className=\"input\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов.\n            Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          autoComplete=\"off\"\n          value={state.name}\n          onChange={inputChange}\n        />\n\n        <label className=\"label\" htmlFor={numberId}>\n          Number\n        </label>\n        <input\n          id={numberId}\n          className=\"input\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, \n            круглые скобки и может начинаться с +\"\n          required\n          autoComplete=\"off\"\n          value={state.number}\n          onChange={inputChange}\n        />\n\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default Form;\n","import PropTypes from 'prop-types';\n\nfunction Filter({ id, value, onChange }) {\n  return (\n    <>\n      <label className=\"label\" htmlFor={id}>\n        Find contacts by name\n      </label>\n\n      <input\n        id={id}\n        className=\"input\"\n        name=\"filter\"\n        type=\"text\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Введите имя которое ищите\"\n        autoComplete=\"off\"\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  id: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\n\nfunction ContactsListElement({ id, name, number, onClick }) {\n  return (\n    <li className=\"listItem\" id={id}>\n      <span className=\"name\">{name}:</span> {number}\n      <button className=\"deleteBtn\" type=\"button\" onClick={onClick}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nContactsListElement.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default ContactsListElement;\n","import PropTypes from 'prop-types';\nimport ContactsListElement from '../ContactsListElement';\n\nfunction Contacts({ names, onClick }) {\n  return (\n    <ul className=\"list\">\n      {names().map(el => {\n        return (\n          <ContactsListElement\n            key={el.id}\n            id={el.id}\n            name={el.name}\n            number={el.number}\n            onClick={onClick}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nContactsListElement.PropTypes = {\n  names: PropTypes.arrayOf(PropTypes.object),\n  onClick: PropTypes.func,\n};\n\nexport default Contacts;\n","import { Component } from 'react';\nimport { v1 as uuidv1 } from 'uuid';\nimport './App.css';\nimport Form from './components/Form';\nimport Filter from './components/Filter';\nimport Contacts from './components/Contacts';\n\nclass App extends Component {\n  filterFieldId = uuidv1();\n\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem('contacts')) {\n      this.setState({\n        contacts: [...JSON.parse(localStorage.getItem('contacts'))],\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts.length !== prevState.contacts.length) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  inputChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submit = obj => {\n    const existingContact = this.state.contacts.find(contact => {\n      return contact.name === obj.name;\n    });\n\n    if (existingContact) {\n      return alert(`${obj.name} is already in contacts`);\n    }\n\n    this.setState(prevState => ({\n      contacts: [\n        {\n          id: uuidv1(),\n          ...obj,\n        },\n        ...prevState.contacts,\n      ],\n    }));\n  };\n\n  contactsFiltering = () => {\n    const { contacts, filter } = this.state;\n    const filterValue = filter.toLocaleLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filterValue);\n    });\n  };\n\n  deleteContact = e => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => {\n        return contact.id !== e.target.parentNode.id;\n      }),\n    }));\n  };\n\n  render() {\n    const {\n      inputChange,\n      submit,\n      filterFieldId,\n      state,\n      contactsFiltering,\n      deleteContact,\n    } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <h2>Phonebook</h2>\n          <Form onSubmit={submit} />\n        </div>\n\n        <div className=\"wrapper\">\n          <h2>Contacts</h2>\n          <Filter\n            id={filterFieldId}\n            value={state.filter}\n            onChange={inputChange}\n          />\n          <Contacts names={contactsFiltering} onClick={deleteContact} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}